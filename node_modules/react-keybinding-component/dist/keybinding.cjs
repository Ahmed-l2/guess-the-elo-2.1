"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/keybinding.tsx
var keybinding_exports = {};
__export(keybinding_exports, {
  default: () => Keybinding
});
module.exports = __toCommonJS(keybinding_exports);
var import_react = require("react");
var TARGETS_BLACKLIST = ["textarea", "input", "select"];
function getTarget(target) {
  if (typeof target === "string") {
    const element = document.querySelector(target);
    if (!element) {
      throw new Error(
        `Selector "${target}" returned null (on keybinding mount)`
      );
    }
    return element;
  }
  return target;
}
function Keybinding(props) {
  const {
    onKey,
    type = "keydown",
    target = document,
    // Probably will make server-side rendering crash
    preventInputConflict = false,
    preventContentEditableConflict = false,
    preventDefault = false,
    stopPropagation = false
  } = props;
  const onKeyEvent = (0, import_react.useCallback)(
    (e) => {
      if (preventDefault)
        e.preventDefault();
      if (stopPropagation)
        e.stopPropagation();
      const target2 = e.target;
      if (target2) {
        let canDispatch = true;
        if (preventInputConflict && TARGETS_BLACKLIST.indexOf(target2.tagName.toLowerCase()) > -1) {
          canDispatch = false;
        }
        if (preventContentEditableConflict && checkIfContentEditable(target2)) {
          canDispatch = false;
        }
        if (canDispatch)
          onKey(e);
      }
    },
    [
      preventDefault,
      stopPropagation,
      preventInputConflict,
      preventContentEditableConflict,
      onKey
    ]
  );
  (0, import_react.useEffect)(() => {
    const actualTarget = getTarget(target);
    actualTarget.addEventListener(type, onKeyEvent);
    return () => {
      actualTarget.removeEventListener(type, onKeyEvent);
    };
  }, [target, type, onKeyEvent]);
  return null;
}
function checkIfContentEditable(node) {
  if (node === null) {
    return false;
  }
  if (node.getAttribute("contenteditable") === "true") {
    return true;
  }
  return checkIfContentEditable(node.parentElement);
}
//# sourceMappingURL=keybinding.cjs.map